@using Data.Processing.Models
@using System.Net.Http
@using Newtonsoft.Json
@model Company.UI.Models.WordListViewModel

<div class="row justify-content-center">
    <div class="col-sm-9">
        @if(Model != null)
        {
            <div class="row justify-content-center mb-2">
                <div class="col-sm-12 text-right pr-0">
                    <button type="button" class="btn btn-info shadow mr-2 font-weight-bold" data-toggle="modal" data-target="#import-words">Import words</button>
                    <button type="button" class="btn btn-success shadow font-weight-bold" data-toggle="modal" data-target="#add-word">Add word</button>
                </div>
            </div>

            await Html.RenderPartialAsync("_AddWord", new Sensitiveword());
            await Html.RenderPartialAsync("_ImportWords");

            List<Sensitiveword> words = Model.WordList.Count() > 0 ? Model.WordList : new List<Sensitiveword>();
            if(words.Count() > 0)
            {
                <div class="row bg-dark text-light sticky-top shadow list-header">
                    <div class="col-sm-1 text-center pt-2 pb-2">
                        <h5 class="mb-0">#</h5>
                    </div>
                    <div class="col-sm-4 pt-2 pb-2">
                        <h5 class="mb-0">Word</h5>            
                    </div>
                    <div class="col-sm-2 pt-2 pb-2 text-left">
                        <h5 class="mb-0">Created</h5>
                    </div>
                    <div class="col-sm-2 pt-2 pb-2 text-left">
                        <h5 class="mb-0">Modified</h5>
                    </div>
                    <div class="col-sm-3 pt-2 pb-2">
                        &nbsp;
                    </div>
                </div>
                <section class="row main-word-list shadow-sm">
                    <div class="col-sm-12">
                        @for(int i = 0; i < words.Count(); i++)
                        {
                            await Html.RenderPartialAsync("_WordRow", words[i]);
                        }                        
                    </div>
                    <div class="scroll-to-top collapse" title="To Top">
                        <button type="button" class="btn btn-sm btn-secondary btn-to-top float-right" onclick="fnScrollToTop()">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">                                
                                <path d="M384 352v64c0 17.67-14.33 32-32 32H96c-17.67 0-32-14.33-32-32v-64c0-17.67-14.33-32-32-32s-32 14.33-32 32v64c0 53.02 42.98 96 96 96h256c53.02 0 96-42.98 96-96v-64c0-17.67-14.33-32-32-32S384 334.3 384 352zM201.4 9.375l-128 128c-12.51 12.51-12.49 32.76 0 45.25c12.5 12.5 32.75 12.5 45.25 0L192 109.3V320c0 17.69 14.31 32 32 32s32-14.31 32-32V109.3l73.38 73.38c12.5 12.5 32.75 12.5 45.25 0s12.5-32.75 0-45.25l-128-128C234.1-3.125 213.9-3.125 201.4 9.375z"/>
                            </svg>
                        </button>
                    </div>
                </section>
            }            
        }
    </div>
</div>
@{
    await BuildToastNotification();
}
@functions{    
    async Task BuildToastNotification()
    {
        if (Model.Success)
            await SuccessToast();
        else
            await FailToast();
    }
    async Task SuccessToast()
    {
        if(Model.Message != "")
            await Html.RenderPartialAsync("../Toaster/_Success", Model.Message);
    }
    async Task FailToast()
    {
        if(Model.Message != "")
            await Html.RenderPartialAsync("../Toaster/_Fail", Model.Message);
    }
}
@section Scripts {
    <script type="text/javascript">        
        $(".toast").toast("show");
    </script>
}